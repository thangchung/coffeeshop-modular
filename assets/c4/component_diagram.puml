@startuml coffeeshop_components

' left to right direction
' skinparam packageStyle rect

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
' uncomment the following line and comment the first to use locally
' !include C4_Component.puml

LAYOUT_TOP_DOWN()
SHOW_PERSON_OUTLINE()
' LAYOUT_AS_SKETCH()
' LAYOUT_WITH_LEGEND()

AddRelTag("async", $textColor=$ARROW_COLOR, $lineColor=$ARROW_COLOR, $lineStyle=DashedLine())

title Components Diagram for Coffee Shop

Person(normal_user, "Normal User", "A user buys coffee and foods")

Container(coffeeshop_app, "The coffee shop application", "This application serves the coffee, drinks and foods and uses by counter, barista and kitchen modules.")
ContainerDb(postgres_db, "Postgres Db", "The database to store the coffee shop data in multiple schemas and tables.")

Container_Boundary(coffeeshop_app, "Coffee Shop Application - .NET 7 - Minimal API") {
    Component(app_router, "/v1/api/orders", "Routing", "this is an entry point into the application")
    
    Component(sender, "Sender", "C#, MediatR - Sender", "")
    Component(publisher, "Publisher", "C#, MediatR - Publisher", "")
     
    Component(OrderInUseCase, "OrderInUseCase", "C#", "Handle PlaceOrderCommand request")
    Component(OrderUpUseCase, "OrderUpUseCase", "C#", "Handle OrderUp event")
    Component(OrderUpdateUseCase, "OrderUpdateUseCase", "C#", "Handle OrderUpdate event")
    Component(KitchenOrderInUseCase, "KitchenOrderInUseCase", "C#", "Handle KitchenOrderIn event")
    Component(BaristaOrderInUseCase, "BaristaOrderInUseCase", "C#", "Handle BaristaOrderIn event")
    
    Component(NotificationHub, "NotificationHub", "C#, SignalR Notification Hub")

    Rel(normal_user, app_router, "Uses", "REST/JSON")
    Rel(app_router, sender, "Send PlaceOrderCommand", "MediatR - Sender")
    
    Rel_U(OrderInUseCase, sender, "[1] Subscribe to PlaceOrderCommand", "MediatR", $tags = "async")
    Rel(OrderInUseCase, postgres_db, "[2] Add a new order into database", "EF Core")
    Rel(OrderInUseCase, publisher, "[3] Publish BaristaOrderIn, KitchenOrderIn, and OrderUpdate events to", "MediatR - Publisher")
    
    Rel(BaristaOrderInUseCase, publisher, "[1] Subscribe to BaristaOrderIn", "MediatR", $tags = "async")
    Rel(BaristaOrderInUseCase, postgres_db, "[2] Add a new barista order into database", "EF Core")
    Rel(BaristaOrderInUseCase, publisher, "[3] Publish OrderUp event to", "MediatR - Publisher")

    Rel(KitchenOrderInUseCase, publisher, "[1] Subscribe to KitchenOrderIn", "MediatR", $tags = "async")
    Rel(KitchenOrderInUseCase, postgres_db, "[2] Add a new kitchen order into database", "EF Core")
    Rel(KitchenOrderInUseCase, publisher, "[3] Publish OrderUp event to", "MediatR - Publisher")

    Rel(OrderUpdateUseCase, publisher, "[1] Subscribe to OrderUpdate", "MediatR", $tags = "async")
    Rel(OrderUpdateUseCase, NotificationHub, "[2] Push message to", "SignalR - Notification Hub")

    Rel(OrderUpUseCase, publisher, "[1] Subscribe to OrderUp", "MediatR", $tags = "async")
    Rel(OrderUpUseCase, postgres_db, "[2] Update order with OrderUp information and persitence into database", "EF Core")
    Rel(OrderUpUseCase, publisher, "[3] Publish OrderUpdate event to", "MediatR - Publisher")
}

Lay_D(OrderInUseCase, KitchenOrderInUseCase)
Lay_R(KitchenOrderInUseCase, BaristaOrderInUseCase)
Lay_D(OrderUpUseCase, BaristaOrderInUseCase)
Lay_U(OrderUpdateUseCase, publisher)
Lay_L(KitchenOrderInUseCase, publisher)
Lay_L(OrderInUseCase, publisher)
Lay_R(sender, publisher)

@enduml